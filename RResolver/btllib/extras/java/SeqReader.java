/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package btllib;

public class SeqReader {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected SeqReader(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SeqReader obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        btllibJNI.delete_SeqReader(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  static public class SeqReaderFlag {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected SeqReaderFlag(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(SeqReaderFlag obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          btllibJNI.delete_SeqReader_SeqReaderFlag(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public SeqReaderFlag() {
      this(btllibJNI.new_SeqReaderFlag(), true);
    }
  
    public final static long FOLD_CASE = btllibJNI.SeqReader_SeqReaderFlag_FOLD_CASE_get();
    public final static long NO_FOLD_CASE = btllibJNI.SeqReader_SeqReaderFlag_NO_FOLD_CASE_get();
    public final static long NO_TRIM_MASKED = btllibJNI.SeqReader_SeqReaderFlag_NO_TRIM_MASKED_get();
    public final static long TRIM_MASKED = btllibJNI.SeqReader_SeqReaderFlag_TRIM_MASKED_get();
    public final static long SHORT_MODE = btllibJNI.SeqReader_SeqReaderFlag_SHORT_MODE_get();
    public final static long LONG_MODE = btllibJNI.SeqReader_SeqReaderFlag_LONG_MODE_get();
  }

  public SeqReader(String source_path, long flags, long threads) {
    this(btllibJNI.new_SeqReader__SWIG_0(source_path, flags, threads), true);
  }

  public SeqReader(String source_path, long flags) {
    this(btllibJNI.new_SeqReader__SWIG_1(source_path, flags), true);
  }

  public SeqReader(String source_path) {
    this(btllibJNI.new_SeqReader__SWIG_2(source_path), true);
  }

  public void close() {
    btllibJNI.SeqReader_close(swigCPtr, this);
  }

  public boolean fold_case() {
    return btllibJNI.SeqReader_fold_case(swigCPtr, this);
  }

  public boolean trim_masked() {
    return btllibJNI.SeqReader_trim_masked(swigCPtr, this);
  }

  public boolean short_mode() {
    return btllibJNI.SeqReader_short_mode(swigCPtr, this);
  }

  public boolean long_mode() {
    return btllibJNI.SeqReader_long_mode(swigCPtr, this);
  }

  public SeqReader.Format get_format() {
    return SeqReader.Format.swigToEnum(btllibJNI.SeqReader_get_format(swigCPtr, this));
  }

  static public class SeqReaderRecord {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected SeqReaderRecord(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(SeqReaderRecord obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          btllibJNI.delete_SeqReader_SeqReaderRecord(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setNum(long value) {
      btllibJNI.SeqReader_SeqReaderRecord_num_set(swigCPtr, this, value);
    }
  
    public long getNum() {
      return btllibJNI.SeqReader_SeqReaderRecord_num_get(swigCPtr, this);
    }
  
    public void setName(String value) {
      btllibJNI.SeqReader_SeqReaderRecord_name_set(swigCPtr, this, value);
    }
  
    public String getName() {
      return btllibJNI.SeqReader_SeqReaderRecord_name_get(swigCPtr, this);
    }
  
    public void setComment(String value) {
      btllibJNI.SeqReader_SeqReaderRecord_comment_set(swigCPtr, this, value);
    }
  
    public String getComment() {
      return btllibJNI.SeqReader_SeqReaderRecord_comment_get(swigCPtr, this);
    }
  
    public void setSeq(String value) {
      btllibJNI.SeqReader_SeqReaderRecord_seq_set(swigCPtr, this, value);
    }
  
    public String getSeq() {
      return btllibJNI.SeqReader_SeqReaderRecord_seq_get(swigCPtr, this);
    }
  
    public void setQual(String value) {
      btllibJNI.SeqReader_SeqReaderRecord_qual_set(swigCPtr, this, value);
    }
  
    public String getQual() {
      return btllibJNI.SeqReader_SeqReaderRecord_qual_get(swigCPtr, this);
    }
  
    public SeqReaderRecord() {
      this(btllibJNI.new_SeqReaderRecord(), true);
    }
  
  }

  public SeqReader.SeqReaderRecord read() {
    return new SeqReader.SeqReaderRecord(btllibJNI.SeqReader_read(swigCPtr, this), true);
  }

  public final static class Format {
    public final static SeqReader.Format UNDETERMINED = new SeqReader.Format("UNDETERMINED");
    public final static SeqReader.Format FASTA = new SeqReader.Format("FASTA");
    public final static SeqReader.Format FASTQ = new SeqReader.Format("FASTQ");
    public final static SeqReader.Format SAM = new SeqReader.Format("SAM");
    public final static SeqReader.Format GFA2 = new SeqReader.Format("GFA2");
    public final static SeqReader.Format INVALID = new SeqReader.Format("INVALID");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Format swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Format.class + " with value " + swigValue);
    }

    private Format(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Format(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Format(String swigName, Format swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Format[] swigValues = { UNDETERMINED, FASTA, FASTQ, SAM, GFA2, INVALID };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static long MAX_SIMULTANEOUS_SEQREADERS = btllibJNI.SeqReader_MAX_SIMULTANEOUS_SEQREADERS_get();
}
