# This file specifies wavelet trees that are used in the benchmark.
#
# Each index is specified by a triple: WT_ID;SDSL_TYPE;WT_LATEX_NAME
# * WT_ID        : An identifier for the index. Only letters and underscores are allowed in ID.
# * SDSL_TYPE    : Corresponding sdsl type.
# * WT_LATEX_NAME: LaTeX name for output in the benchmark report.

# Different Shapes and Bit-Vectors (Byte-Alphabet):
BLCD_v;wt_blcd<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-BLCD-v
#BLCD_v5;wt_blcd<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-BLCD-v5
#BLCD_il;wt_blcd<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, byte_tree<>>;WT-BLCD-il
BLCD_RRR15;wt_blcd<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, rrr_vector<15>::select_0_type, byte_tree<>>;WT-BLCD-RRR15
BLCD_RRR63;wt_blcd<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, rrr_vector<63>::select_0_type, byte_tree<>>;WT-BLCD-RRR63
HUTU_v;wt_hutu<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-HUTU-v
#HUTU_v5;wt_hutu<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-HUTU-v5
#HUTU_il;wt_hutu<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, byte_tree<>>;WT-HUTU-il
HUTU_RRR15;wt_hutu<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, rrr_vector<15>::select_0_type, byte_tree<>>;WT-HUTU-RRR15
HUTU_RRR63;wt_hutu<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, rrr_vector<63>::select_0_type, byte_tree<>>;WT-HUTU-RRR63
HUFF_v;wt_huff<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-HUFF-v
#HUFF_v5;wt_huff<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, byte_tree<>>;WT-HUFF-v5
#HUFF_il;wt_huff<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, byte_tree<>>;WT-HUFF-il
HUFF_RRR15;wt_huff<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, rrr_vector<15>::select_0_type, byte_tree<>>;WT-HUFF-RRR15
HUFF_RRR63;wt_huff<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, rrr_vector<63>::select_0_type, byte_tree<>>;WT-HUFF-RRR63
RLMN_v;wt_rlmn<bit_vector, rank_support_v<>, select_support_mcl<1>, wt_huff<>>;WT-RLMN-v
#RLMN_v5;wt_rlmn<bit_vector, rank_support_v5<>, select_support_mcl<1>, wt_huff<>>;WT-RLMN-v5
#RLMN_il;wt_rlmn<bit_vector_il<>, rank_support_il<>, select_support_il<1>, wt_huff<>>;WT-RLMN-il
#RLMN_RRR15;wt_rlmn<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, wt_huff<>>;WT-RLMN-RRR15
#RLMN_RRR63;wt_rlmn<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, wt_huff<>>;WT-RLMN-RRR63
RLMN_SD;wt_rlmn<sd_vector<>, sd_vector<>::rank_1_type, sd_vector<>::select_1_type, wt_huff<>>;WT-RLMN-SD

# Different Shapes and Bit-Vectors (Int-Alphabet):
#WT_INT_v;wt_int<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>>;WT-INT-v
#WT_INT_v5;wt_int<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>>;WT-INT-v5
#WT_INT_il;wt_int<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>>;WT-INT-il
#WT_INT_RRR15;wt_int<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, rrr_vector<15>::select_0_type>;WT-INT-RRR15
#WT_INT_RRR63;wt_int<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, rrr_vector<63>::select_0_type>;WT-INT-RRR63
#BLCD_v;wt_blcd<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-BLCD-v
#BLCD_v5;wt_blcd<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-BLCD-v5
#BLCD_il;wt_blcd<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, int_tree<>>;WT-BLCD-il
#BLCD_RRR15;wt_blcd<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, rrr_vector<15>::select_0_type, int_tree<>>;WT-BLCD-RRR15
#BLCD_RRR63;wt_blcd<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, rrr_vector<63>::select_0_type, int_tree<>>;WT-BLCD-RRR63
#HUTU_v;wt_hutu<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-HUTU-v
#HUTU_v5;wt_hutu<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-HUTU-v5
#HUTU_il;wt_hutu<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, int_tree<>>;WT-HUTU-il
#HUTU_RRR15;wt_hutu<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, rrr_vector<15>::select_0_type, int_tree<>>;WT-HUTU-RRR15
#HUTU_RRR63;wt_hutu<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, rrr_vector<63>::select_0_type, int_tree<>>;WT-HUTU-RRR63
#HUFF_v;wt_huff<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-HUFF-v
#HUFF_v5;wt_huff<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>, int_tree<>>;WT-HUFF-v5
#HUFF_il;wt_huff<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>, int_tree<>>;WT-HUFF-il
#HUFF_RRR15;wt_huff<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, rrr_vector<15>::select_0_type, int_tree<>>;WT-HUFF-RRR15
#HUFF_RRR63;wt_huff<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, rrr_vector<63>::select_0_type, int_tree<>>;WT-HUFF-RRR63
#WM_INT_v;wm_int<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>>;WM-INT-v
#WM_INT_v5;wm_int<bit_vector, rank_support_v5<>, select_support_mcl<1>, select_support_mcl<0>>;WM-INT-v5
#WM_INT_il;wm_int<bit_vector_il<>, rank_support_il<>, select_support_il<1>, select_support_il<0>>;WM-INT-il
#WM_INT_RRR15;wm_int<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, rrr_vector<15>::select_0_type>;WM-INT-RRR15
#WM_INT_RRR63;wm_int<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, rrr_vector<63>::select_0_type>;WM-INT-RRR63
#RLMN_v_INT;wt_rlmn<bit_vector, rank_support_v<>, select_support_mcl<1>, wt_int<>>;INT-WT-RLMN-v
#RLMN_v5_INT;wt_rlmn<bit_vector, rank_support_v5<>, select_support_mcl<1>, wt_int<>>;INT-WT-RLMN-v5
#RLMN_il_INT;wt_rlmn<bit_vector_il<>, rank_support_il<>, select_support_il<1>, wt_int<>>;INT-WT-RLMN-il
#RLMN_RRR15_INT;wt_rlmn<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, wt_int<>>;INT-WT-RLMN-RRR15
#RLMN_RRR63_INT;wt_rlmn<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, wt_int<>>;INT-WT-RLMN-RRR63
#RLMN_SD_INT;wt_rlmn<sd_vector<>, sd_vector<>::rank_1_type, sd_vector<>::select_1_type, wt_int<>>;INT-WT-RLMN-SD
#WT_GMR_RS_IV;wt_gmr_rs<int_vector<>, bit_vector, select_support_mcl<1>, select_support_mcl<0>>;WT-GMR-RS-IV
#WT_GMR_RS_ED128;wt_gmr_rs<enc_vector<coder::elias_delta,128>, bit_vector, select_support_mcl<1>, select_support_mcl<0>>;WT-GMR-RS-ED128
#WT_GMR_IV_IPS32;wt_gmr<int_vector<>, inv_multi_perm_support<32, int_vector<> >  >;WT-GMR-IV-IPS32
#WT_GMR_ED128_IPS32;wt_gmr< enc_vector<coder::elias_delta,128>, inv_multi_perm_support<32,enc_vector<coder::elias_delta,128> >  >;WT-GMR-ED128-IPS32

#WT_INT_v;wt_int<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>>;WT-INT-v
#WM_INT_v;wm_int<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>>;WM-INT-v
#WM_INT_RRR15;wm_int<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, rrr_vector<15>::select_0_type>;WM-INT-RRR15
#WM_INT_RRR63;wm_int<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, rrr_vector<63>::select_0_type>;WM-INT-RRR63
#WTAP_WMINT_v;wt_ap<wm_int<bit_vector, rank_support_v<>, select_support_mcl<1>, select_support_mcl<0>>>;WT-AP-WM-INT-v
#WTAP_WMINT_RRR15;wt_ap<wm_int<rrr_vector<15>, rrr_vector<15>::rank_1_type, rrr_vector<15>::select_1_type, rrr_vector<15>::select_0_type>>;WT-AP-WM-INT-RRR15
#WTAP_WMINT_RRR63;wt_ap<wm_int<rrr_vector<63>, rrr_vector<63>::rank_1_type, rrr_vector<63>::select_1_type, rrr_vector<63>::select_0_type>>;WT-AP-WM-INT-RRR63


WTAP;wt_ap<wt_huff<bit_vector, rank_support_v5<>>, wm_int<>>;WT-AP-WTHUFF-WM-INT-v
