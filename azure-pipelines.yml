jobs:  
- job: mac11_gcc
  pool:
    vmImage: macOS-11
  steps:
  - script: |
      rm -f /usr/local/bin/2to3-3.11 # brew is having issues with installing Python
      rm -f /usr/local/bin/2to3 # brew is having issues with installing Python
      brew install automake boost openmpi google-sparsehash make pandoc ghc gcc@12
    displayName: Install common
  - script: |
      wget https://github.com/bcgsc/btllib/releases/download/v1.5.1/btllib-1.5.1.tar.gz
      export CC=gcc-12
      export CXX=g++-12
      tar xzf btllib-1.5.1.tar.gz
      cd btllib-1.5.1
      ./compile
    displayName: Install btllib
  - script: |
      ./autogen.sh
      export DISTCHECK_CONFIGURE_FLAGS="CC=gcc-12 CXX=g++-12 --with-boost=/usr/local/opt/boost --with-sparsehash=/usr/local/opt/google-sparsehash --with-mpi=/usr/local/opt/openmpi --with-btllib=/Users/runner/work/1/s/btllib-1.5.1/install"
      ./configure CC=gcc-12 CXX=g++-12 --with-boost=/usr/local/opt/boost --with-sparsehash=/usr/local/opt/google-sparsehash --with-mpi=/usr/local/opt/openmpi --with-btllib=/Users/runner/work/1/s/btllib-1.5.1/install
      make -j12 distcheck
    displayName: Compiling ABySS with gcc-12

- job: mac_latest_gcc
  pool:
    vmImage: macOS-latest
  steps:
  - script: |
      rm -f /usr/local/bin/2to3 # brew is having issues with installing Python
      rm -f /usr/local/bin/2to3-3.12 # brew failing on linkage step
      rm -f /usr/local/lib/node_modules/npm/node_modules/@npmcli/disparity-colors/node_modules/ansi-styles/index.js # brew failing on node linkage
      brew update
      brew install automake boost openmpi google-sparsehash make pandoc ghc gcc@12 llvm
    displayName: Install common
  - script: |
      wget https://github.com/bcgsc/btllib/releases/download/v1.5.1/btllib-1.5.1.tar.gz
      export CC=gcc-12
      export CXX=g++-12
      tar xzf btllib-1.5.1.tar.gz
      cd btllib-1.5.1
      ./compile
    displayName: Install btllib
  - script: |
      ./autogen.sh
      export CXXFLAGS="$CXXFLAGS -fuse-ld=lld"
      echo $CXXFLAGS
      export CFLAGS="$CFLAGS -fuse-ld=lld"
      export OBJCFLAGS="$OBJCFLAGS -fuse-ld=lld"
      export OBJCXXFLAGS="$OBJCXXFLAGS -fuse-ld=lld"
      export DISTCHECK_CONFIGURE_FLAGS="CC=gcc-12 CXX=g++-12 --with-boost=/usr/local/opt/boost --with-sparsehash=/usr/local/opt/google-sparsehash --with-mpi=/usr/local/opt/openmpi --with-btllib=/Users/runner/work/1/s/btllib-1.5.1/install"
      ./configure CC=gcc-12 CXX=g++-12 --with-boost=/usr/local/opt/boost --with-sparsehash=/usr/local/opt/google-sparsehash --with-mpi=/usr/local/opt/openmpi --with-btllib=/Users/runner/work/1/s/btllib-1.5.1/install
      make -j12 distcheck
    displayName: Compiling ABySS with gcc-12

- job:
  displayName: mac_latest-compilers-clang
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
  - script: conda create --yes --quiet --name abyss_CI
    displayName: Create Anaconda environment
  - script: |
      source activate abyss_CI
      conda install --yes -c conda-forge mamba python=3.9
      mamba install --yes -c conda-forge -c bioconda clangxx_osx-64 make boost-cpp sparsehash openmpi automake perl pandoc meson ninja
    displayName: Install dependencies
  - script: |
      source activate abyss_CI
      wget https://github.com/bcgsc/btllib/releases/download/v1.7.0/btllib-1.7.0.tar.gz
      tar xzf btllib-1.7.0.tar.gz
      cd btllib-1.7.0
      export CC=clang
      export CXX=clang++
      ./compile
    displayName: Install btllib
  - script: |
      source activate abyss_CI
      export CC=clang
      export CXX=clang++
      export DISTCHECK_CONFIGURE_FLAGS="CC=clang CXX=clang++  --with-btllib=/Users/runner/work/1/s/btllib-1.7.0/install"
      ./autogen.sh
      ./configure  --with-btllib=/Users/runner/work/1/s/btllib-1.7.0/install
      make -j12 distcheck AM_CXXFLAGS=-Wno-error=unused-but-set-variable
    displayName: Compiling ABySS

- job:
  displayName: mac_clang14
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
  - script: conda create --yes --quiet --name abyss_CI
    displayName: Create Anaconda environment
  - script: |
      source activate abyss_CI
      conda install --yes -c conda-forge mamba python=3.9
      mamba install --yes -c conda-forge -c bioconda compilers=1.5.2 make boost-cpp sparsehash openmpi automake perl pandoc
    displayName: Install dependencies
  - script: |
      source activate abyss_CI
      wget https://github.com/bcgsc/btllib/releases/download/v1.7.0/btllib-1.7.0.tar.gz
      tar xzf btllib-1.7.0.tar.gz
      cd btllib-1.7.0
      export CC=clang
      export CXX=clang++
      ./compile
    displayName: Install btllib
  - script: |
      source activate abyss_CI
      export CC=clang
      export CXX=clang++
      export DISTCHECK_CONFIGURE_FLAGS="CC=clang CXX=clang++ --with-btllib=/Users/runner/work/1/s/btllib-1.7.0/install"
      ./autogen.sh
      ./configure --with-btllib=/Users/runner/work/1/s/btllib-1.7.0/install
      make -j12 distcheck
    displayName: Compiling ABySS

- job:
  displayName: mac_clang13
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
  - script: conda create --yes --quiet --name abyss_CI
    displayName: Create Anaconda environment
  - script: |
      source activate abyss_CI
      conda install --yes -c conda-forge mamba python=3.9
      mamba install --yes -c conda-forge -c bioconda compilers=1.4.2 make boost-cpp sparsehash openmpi automake perl btllib pandoc
    displayName: Install dependencies
  - script: |
      source activate abyss_CI
      wget https://github.com/bcgsc/btllib/releases/download/v1.7.0/btllib-1.7.0.tar.gz
      tar xzf btllib-1.7.0.tar.gz
      cd btllib-1.7.0
      export CC=clang
      export CXX=clang++
      ./compile
    displayName: Install btllib
  - script: |
      source activate abyss_CI
      export CC=clang
      export CXX=clang++
      export DISTCHECK_CONFIGURE_FLAGS="CC=clang CXX=clang++ --with-btllib=/Users/runner/work/1/s/btllib-1.7.0/install"
      ./autogen.sh
      ./configure --with-btllib=/Users/runner/work/1/s/btllib-1.7.0/install
      make -j12 distcheck
    displayName: Compiling ABySS with clang 13

- job:
  displayName: mac_clang12
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
  - script: conda create --yes --quiet --name abyss_CI
    displayName: Create Anaconda environment
  - script: |
      source activate abyss_CI
      conda install --yes -c conda-forge mamba python=3.9
      mamba install --yes -c conda-forge -c bioconda compilers=1.4.0 make boost-cpp sparsehash openmpi automake perl pandoc llvm-openmp
    displayName: Install dependencies
  - script: |
      source activate abyss_CI
      wget https://github.com/bcgsc/btllib/releases/download/v1.5.1/btllib-1.5.1.tar.gz
      tar xzf btllib-1.5.1.tar.gz
      cd btllib-1.5.1
      export CC=clang
      export CXX=clang++
      ./compile
    displayName: Install btllib
  - script: |
      source activate abyss_CI
      export CC=clang
      export CXX=clang++
      export DISTCHECK_CONFIGURE_FLAGS="CC=clang CXX=clang++ --with-btllib=/Users/runner/work/1/s/btllib-1.5.1/install"
      ./autogen.sh
      ./configure --with-btllib=/Users/runner/work/1/s/btllib-1.5.1/install
      make -j12 distcheck
    displayName: Compiling ABySS with clang 12

- job: linux_gcc12
  pool:
    vmImage: ubuntu-latest
  steps:
  - script: |
      sudo apt-get update -qq
      sudo apt-get install -qq software-properties-common
      sudo add-apt-repository -y "deb http://us.archive.ubuntu.com/ubuntu bionic main universe security"
      sudo add-apt-repository -y "deb http://us.archive.ubuntu.com/ubuntu bionic-updates main universe restricted"
      sudo apt-get update -qq
      sudo apt-get install -qq autoconf automake gcc g++ libboost-dev libgtest-dev libopenmpi-dev libsparsehash-dev make pandoc
    displayName: Install common
  - script: sudo apt-get install -qq gcc-12 g++-12
    displayName: Install gcc-12
  - script: |
      wget https://github.com/bcgsc/btllib/releases/download/v1.5.1/btllib-1.5.1.tar.gz
      tar xzf btllib-1.5.1.tar.gz
      cd btllib-1.5.1
      export CC=gcc-12
      export CXX=g++-12
      ./compile
    displayName: Install btllib
  - script: |
      ./autogen.sh
      export DISTCHECK_CONFIGURE_FLAGS="CC=gcc-12 CXX=g++-12 --with-btllib=/home/vsts/work/1/s/btllib-1.5.1/install"
      ./configure CC=gcc-12 CXX=g++-12 --with-mpi=/usr/lib/openmpi --with-btllib=/home/vsts/work/1/s/btllib-1.5.1/install
      make -j12 distcheck
    displayName: Compiling ABySS with gcc-12


- job: linux_gcc11
  pool:
    vmImage: ubuntu-latest
  steps:
  - script: |
      sudo apt-get update -qq
      sudo apt-get install -qq software-properties-common
      sudo add-apt-repository -y "deb http://us.archive.ubuntu.com/ubuntu bionic main universe security"
      sudo add-apt-repository -y "deb http://us.archive.ubuntu.com/ubuntu bionic-updates main universe restricted"
      sudo apt-get update -qq
      sudo apt-get install -qq autoconf automake gcc g++ libboost-dev libgtest-dev libopenmpi-dev libsparsehash-dev make pandoc
    displayName: Install common
  - script: sudo apt-get install -qq gcc-11 g++-11
    displayName: Install gcc-11
  - script: |
      wget https://github.com/bcgsc/btllib/releases/download/v1.5.1/btllib-1.5.1.tar.gz
      tar xzf btllib-1.5.1.tar.gz
      cd btllib-1.5.1
      export CC=gcc-11
      export CXX=g++-11
      ./compile
    displayName: Install btllib
  - script: |
      ./autogen.sh
      export DISTCHECK_CONFIGURE_FLAGS="CC=gcc-11 CXX=g++-11 --with-btllib=/home/vsts/work/1/s/btllib-1.5.1/install"
      ./configure CC=gcc-11 CXX=g++-11 --with-mpi=/usr/lib/openmpi --with-btllib=/home/vsts/work/1/s/btllib-1.5.1/install
      make -j12 distcheck
    displayName: Compiling ABySS with gcc-11

- job: linux_gcc10
  pool:
    vmImage: ubuntu-20.04
  steps:
  - script: |
      sudo apt-get update -qq
      sudo apt-get install -qq software-properties-common
      sudo add-apt-repository -y "deb http://us.archive.ubuntu.com/ubuntu bionic main universe security"
      sudo add-apt-repository -y "deb http://us.archive.ubuntu.com/ubuntu bionic-updates main universe restricted"
      sudo apt-get update -qq
      sudo apt-get install -qq autoconf automake gcc g++ libboost-dev libgtest-dev libopenmpi-dev libsparsehash-dev make pandoc
    displayName: Install common
  - script: sudo apt-get install -qq gcc-10 g++-10
    displayName: Install gcc-10
  - script: |
      wget https://github.com/bcgsc/btllib/releases/download/v1.5.1/btllib-1.5.1.tar.gz
      tar xzf btllib-1.5.1.tar.gz
      cd btllib-1.5.1
      export CC=gcc-10
      export CXX=g++-10
      ./compile
    displayName: Install btllib
  - script: |
      ./autogen.sh
      export DISTCHECK_CONFIGURE_FLAGS="CC=gcc-10 CXX=g++-10 --with-btllib=/home/vsts/work/1/s/btllib-1.5.1/install"
      ./configure CC=gcc-10 CXX=g++-10 --with-mpi=/usr/lib/openmpi --with-btllib=/home/vsts/work/1/s/btllib-1.5.1/install
      make -j12 distcheck
    displayName: Compiling ABySS with gcc-10
  - script: |
      curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      sudo apt-add-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main"
      sudo apt-get update
      sudo apt-get install -y --no-install-recommends clang-format-8
      sudo ln -sf clang-format-8 /usr/bin/clang-format
    displayName: Install clang-format
  - script: make clang-format
    displayName: Run clang-format

- job: linux_gcc9
  pool:
    vmImage: ubuntu-latest
  steps:
  - script: |
      sudo apt-get update -qq
      sudo apt-get install -qq software-properties-common
      sudo add-apt-repository -y "deb http://us.archive.ubuntu.com/ubuntu bionic main universe security"
      sudo add-apt-repository -y "deb http://us.archive.ubuntu.com/ubuntu bionic-updates main universe restricted"
      sudo apt-get update -qq
      sudo apt-get install -qq autoconf automake gcc g++ libboost-dev libgtest-dev libopenmpi-dev libsparsehash-dev make pandoc
    displayName: Install common
  - script: sudo apt-get install -qq gcc-9 g++-9
    displayName: Install gcc-9
  - script: |
      wget https://github.com/bcgsc/btllib/releases/download/v1.5.1/btllib-1.5.1.tar.gz
      tar xzf btllib-1.5.1.tar.gz
      cd btllib-1.5.1
      export CC=gcc-9
      export CXX=g++-9
      ./compile
    displayName: Install btllib
  - script: |
      ./autogen.sh
      export DISTCHECK_CONFIGURE_FLAGS="CC=gcc-9 CXX=g++-9 --with-btllib=/home/vsts/work/1/s/btllib-1.5.1/install"
      ./configure CC=gcc-9 CXX=g++-9 --with-mpi=/usr/lib/openmpi --with-btllib=/home/vsts/work/1/s/btllib-1.5.1/install
      make -j12 distcheck
    displayName: Compiling ABySS with gcc-9

- job: linux_gcc8
  pool:
    vmImage: ubuntu-latest
  steps:
  - script: |
      sudo apt-get update -qq
      sudo apt-get install -qq software-properties-common
      sudo add-apt-repository -y "deb http://us.archive.ubuntu.com/ubuntu focal main universe security"
      sudo add-apt-repository -y "deb http://us.archive.ubuntu.com/ubuntu focal-updates main universe restricted"
      sudo apt-get update -qq
      sudo apt-get install -qq autoconf automake gcc g++ libboost-dev libgtest-dev libopenmpi-dev libsparsehash-dev make pandoc
    displayName: Install common
  - script: sudo apt-get install -qq gcc-8 g++-8
    displayName: Install gcc-8
  - script: |
      wget https://github.com/bcgsc/btllib/releases/download/v1.5.1/btllib-1.5.1.tar.gz
      tar xzf btllib-1.5.1.tar.gz
      cd btllib-1.5.1
      export CC=gcc-8
      export CXX=g++-8
      ./compile
    displayName: Install btllib
  - script: |
      ./autogen.sh
      export DISTCHECK_CONFIGURE_FLAGS="CC=gcc-8 CXX=g++-8 --with-btllib=/home/vsts/work/1/s/btllib-1.5.1/install"
      ./configure CC=gcc-8 CXX=g++-8 --with-mpi=/usr/lib/openmpi --with-btllib=/home/vsts/work/1/s/btllib-1.5.1/install
      make -j12 distcheck
    displayName: Compiling ABySS with gcc-8

- job:
  displayName: linux_gcc-latest
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH
  - script: conda create --yes --quiet --name abyss_CI
    displayName: Create Anaconda environment
  - script: |
      source activate abyss_CI
      conda install --yes -c conda-forge mamba python=3.9
      mamba install --yes -c conda-forge -c bioconda compilers make boost-cpp sparsehash openmpi util-linux perl btllib pandoc
    displayName: Install dependencies
  - script: |
      source activate abyss_CI
      ./autogen.sh
      ./configure
      make -j12 distcheck AM_CXXFLAGS=-Wall CXXFLAGS='-pthread'
    displayName: Compiling ABySS with gcc
    
